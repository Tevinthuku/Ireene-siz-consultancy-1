'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * All the grid's available contexts.
 *
 * @constant
 * @type {string[]}
 */
var contexts = ['xs', 'sm', 'md', 'lg', 'xl'];

/**
 * Component representing a column from a layout grid.
 * In order to work properly it needs to be wrapped inside a <Row/> component.
 *
 * @extends Component
 */

var Col = function (_Component) {
  _inherits(Col, _Component);

  function Col() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, Col);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(Col)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.getCols = function () {
      var classes = [];

      contexts.forEach(function (context) {
        var _this$props = _this.props;
        var size = _this$props[context];
        var offset = _this$props[context + 'Offset'];
        var hidden = _this$props[context + 'Hidden'];
        var pull = _this$props[context + 'Pull'];
        var push = _this$props[context + 'Push'];


        size && classes.push('col-' + context + '-' + size);
        hidden && classes.push('hidden-' + context + '-' + hidden);
        offset && classes.push('col-' + context + '-offset-' + offset);
        pull && classes.push('col-' + context + '-pull-' + pull);
        push && classes.push('col-' + context + '-push-' + push);
      });

      return classes;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * Builds the column classes based on its properties and the available contexts.
   *
   * @method getCols
   * @return {Array}
   */


  _createClass(Col, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;
      var className = _props.className;
      var element = _props.element;

      var rest = _objectWithoutProperties(_props, ['children', 'className', 'element']);

      var Component = element;

      return _react2.default.createElement(
        Component,
        _extends({ className: (0, _classnames2.default)(className, this.getCols())
        }, rest),
        children
      );
    }
  }]);

  return Col;
}(_react.Component);

Col.propTypes = {

  // Number of columns for extra small devices (<544px).
  xs: _react.PropTypes.number,

  // Number of columns for small devices (≥544px).
  sm: _react.PropTypes.number,

  // Number of columns for medium devices (≥768px).
  md: _react.PropTypes.number,

  // Number of columns for large devices (≥992px).
  lg: _react.PropTypes.number,

  // Number of columns for extra large devices (≥1200px).
  xl: _react.PropTypes.number,

  // Move columns to the right for extra small devices (<544px).
  xsOffset: _react.PropTypes.number,

  // Move columns to the right for small devices (≥544px).
  smOffset: _react.PropTypes.number,

  // Move columns to the right for medium devices (≥768px).
  mdOffset: _react.PropTypes.number,

  // Move columns to the right for large devices (≥992px).
  lgOffset: _react.PropTypes.number,

  // Move columns to the right for extra large devices (≥1200px).
  xlOffset: _react.PropTypes.number,

  // Hide column above or below extra small devices (<544px).
  xsHidden: _react.PropTypes.oneOf(['up', 'down']),

  // Hide column above or below small devices (≥544px).
  smHidden: _react.PropTypes.oneOf(['up', 'down']),

  // Hide column above or below medium devices (≥768px).
  mdHidden: _react.PropTypes.oneOf(['up', 'down']),

  // Hide column above or below large devices (≥992px).
  lgHidden: _react.PropTypes.oneOf(['up', 'down']),

  // Hide column above or below large devices (≥1200px).
  xlHidden: _react.PropTypes.oneOf(['up', 'down']),

  // Change the order of grid columns to the left for extra small devices (<544px).
  xsPull: _react.PropTypes.number,

  // Change the order of grid columns to the left for small devices (≥544px).
  smPull: _react.PropTypes.number,

  // Change the order of grid columns to the left for medium devices (≥768px).
  mdPull: _react.PropTypes.number,

  // Change the order of grid columns to the left for large devices (≥992px).
  lgPull: _react.PropTypes.number,

  // Change the order of grid columns to the left for extra large devices (≥1200px).
  xlPull: _react.PropTypes.number,

  // Change the order of grid columns to the right for extra small devices (<544px).
  xsPush: _react.PropTypes.number,

  // Change the order of grid columns to the right for small devices (≥544px).
  smPush: _react.PropTypes.number,

  // Change the order of grid columns to the right for medium devices (≥768px).
  mdPush: _react.PropTypes.number,

  // Change the order of grid columns to the right for large devices (≥992px).
  lgPush: _react.PropTypes.number,

  // Change the order of grid columns to the right for extra large devices (≥1200px).
  xlPush: _react.PropTypes.number,

  // Change the type of element used to generate the component.
  element: _react.PropTypes.string
};
Col.defaultProps = {

  // Set the default element type.
  element: 'div'
};
exports.default = Col;
module.exports = exports['default'];